open! Core
open Pixel_logic_library
open Hw2_pixel_logic

let create_html (game_state : Game_state.t) =
  let board_html = 
    let rows = List.init game_state.rows ~f:(fun row ->
      let cells = List.init game_state.columns ~f:(fun col ->
        let cell_value = Map.find game_state.board { row; column = col } in
        let content = 
          match cell_value with
          | Some Red -> "ðŸ”´"
          | Some Blue -> "ðŸ”µ" 
          | None -> "âšª"
        in
        Printf.sprintf "<td>%s</td>" content
      ) |> String.concat ~sep:""
      in
      Printf.sprintf "<tr>%s</tr>" cells
    ) |> String.concat ~sep:""
  in
  
  let game_info = 
    match game_state.decision with
    | In_progress { whose_turn } ->
      Printf.sprintf "Current Player: %s" 
        (match whose_turn with Red -> "Red" | Blue -> "Blue")
    | Winner player ->
      Printf.sprintf "Winner: %s" 
        (match player with Red -> "Red" | Blue -> "Blue")
    | Stalemate -> "Stalemate"
  in
  
  Printf.sprintf {|
<!DOCTYPE html>
<html>
<head>
    <title>Pixel Game</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        table { margin: 20px auto; border-collapse: collapse; }
        td { width: 40px; height: 40px; border: 1px solid black; text-align: center; font-size: 20px; }
        .game-info { font-size: 18px; font-weight: bold; margin: 20px; }
    </style>
</head>
<body>
    <h1>Pixel Game (OCaml Generated)</h1>
    <table>%s</table>
    <div class="game-info">%s</div>
    <p>This HTML was generated by OCaml!</p>
</body>
</html>
|} board_html game_info

let () =
  let initial_state =
    Game_state.create ~winning_sequence_length:4 ~rows:8 ~columns:8
    |> Result.ok
    |> Option.value_exn
  in
  let html = create_html initial_state in
  Out_channel.write_all "pixel_game_ocaml.html" ~data:html