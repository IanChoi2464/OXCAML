open! Core
open Pixel_logic_library
open Hw2_pixel_logic

let create_pixel_html () =
  let initial_state =
    Game_state.create ~winning_sequence_length:4 ~rows:8 ~columns:8
    |> Result.ok
    |> Option.value_exn
  in
  
  let board_html = 
    let rows = List.init initial_state.rows ~f:(fun row ->
      let cells = List.init initial_state.columns ~f:(fun col ->
        let is_corner = (row = 0 && col = 0) || (row = 0 && col = 7) || 
                       (row = 7 && col = 0) || (row = 7 && col = 7) in
        let cell_value = Map.find initial_state.board { row; column = col } in
        let content = 
          if is_corner then "‚ùå"
          else match cell_value with
          | Some Red -> "üî¥"
          | Some Blue -> "üîµ" 
          | None -> "‚ö™"
        in
        let style = if is_corner then "background-color: #ccc;" else "" in
        Printf.sprintf "<td style=\"%s\">%s</td>" style content
      ) |> String.concat ~sep:""
      in
      Printf.sprintf "<tr>%s</tr>" cells
    ) |> String.concat ~sep:""
  in
  
  let game_info = 
    match initial_state.decision with
    | In_progress { whose_turn } ->
      Printf.sprintf "Current Player: %s" 
        (match whose_turn with Red -> "Red" | Blue -> "Blue")
    | Winner player ->
      Printf.sprintf "Winner: %s" 
        (match player with Red -> "Red" | Blue -> "Blue")
    | Stalemate -> "Stalemate"
  in
  
  Printf.sprintf {|
<!DOCTYPE html>
<html>
<head>
    <title>Pixel Game - OCaml Generated</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%);
            color: white;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        h1 { 
            color: #fff;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 30px;
        }
        table { 
            margin: 20px auto; 
            border-collapse: collapse; 
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border-radius: 10px;
            overflow: hidden;
        }
        td { 
            width: 50px; 
            height: 50px; 
            border: 2px solid #fff; 
            text-align: center; 
            font-size: 24px; 
            background: rgba(255,255,255,0.1);
            transition: all 0.3s ease;
        }
        td:hover {
            background: rgba(255,255,255,0.2);
            transform: scale(1.1);
        }
        .game-info { 
            font-size: 20px; 
            font-weight: bold; 
            margin: 30px 0;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        .rules {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: left;
        }
        .rules h3 {
            margin-top: 0;
            color: #fff;
        }
        .rules ul {
            color: #e0e0e0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Pixel Game</h1>
        <table>%s</table>
        <div class="game-info">%s</div>
        
        <div class="rules">
            <h3>üéØ Game Rules:</h3>
            <ul>
                <li>8x8 board with 4 corner cells unusable (‚ùå)</li>
                <li>Initial stones: Red at (3,3) and Blue at (4,4)</li>
                <li>Red player starts first</li>
                <li>Use sliders to position your stone</li>
                <li>Get 4 consecutive stones to win!</li>
            </ul>
        </div>
        
        <p><strong>‚ú® This HTML was generated by OCaml!</strong></p>
        <p>Built with: OCaml + Dune + Core</p>
    </div>
</body>
</html>
|} board_html game_info

let () =
  let html = create_pixel_html () in
  Out_channel.write_all "pixel_game_ocaml.html" ~data:html;
  print_endline "‚úÖ HTML generated: pixel_game_ocaml.html"
